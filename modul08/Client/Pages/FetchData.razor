@page "/fetchdata"
@using modul08.Shared
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <button @onclick="ToggleTemperature">
        Switch to @(showCelsius ? "Fahrenheit" : "Celsius")
    </button>

    // Opgave 7:
    <button @onclick="IncreaseForecasts">5-mere</button>
    <button @onclick="DecreaseForecasts">5-mindre</button>

    // Opgave 8:
    <h3>Select number of forecasts:</h3>
    <InputNumber @bind-Value="forecastCount"></InputNumber>
    <button @onclick="RefreshForecasts">Fetch Forecasts</button>

    // Opgave 9:
    <p>
        Minimum Temperatur:
        <InputNumber @bind-Value="minTemperature" />
        Maximum Temperatur:
        <InputNumber @bind-Value="maxTemperature" />
        <button @onclick="FetchFilteredData">Filter</button>

    </p>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Location</th> <!-- Tilføjet -->
                <th>Temperature</th> <!-- Ændret fra 'Temp. (C)' -->
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>

            @for (var i = 0; i < forecasts.Length; i++)
            {
                var forecast = forecasts[i];
                var rowStyle = i % 2 == 0 ? "background-color: #f0f0f0;" : "";
                var summaryColor = GetColorBasedOnSummary(forecast.Summary);
                <tr style="@rowStyle">
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.Location</td>
                    <td>
                        @(showCelsius ? forecast.TemperatureC.ToString() : forecast.TemperatureF.ToString())
                    </td>
                    <td style="color: @summaryColor">@forecast.Summary</td>
                </tr>
            }

        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    // Opgave 9:
    private int minTemperature = -20;  // default value
    private int maxTemperature = 55;   // default value


    // Tilføjet error handling; log errors til konsol
    private async Task FetchFilteredData()
    {
        var response = await Http.GetAsync($"api/vejr?minTemp={minTemperature}&maxTemp={maxTemperature}&count={forecastCount}");

        if (response.IsSuccessStatusCode)
        {
            forecasts = await response.Content.ReadFromJsonAsync<WeatherForecast[]>();
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {errorContent}");
        }
    }


    // Opgave 7: --> Ændret igen efter opgave 9
    private int forecastCount = 10;

    protected override async Task OnInitializedAsync()
    {
        await FetchFilteredData();
    }

    private bool showCelsius = true;

    private void ToggleTemperature()
    {
        showCelsius = !showCelsius;
    }

    private async Task IncreaseForecasts()
    {
        forecastCount += 5;
        await RefreshForecasts();
    }

    private async Task DecreaseForecasts()
    {
        if (forecastCount > 5) // Dette sikrer, at du ikke går under 0
        {
            forecastCount -= 5;
            await RefreshForecasts();
        }
    }

    /*
    private async Task RefreshForecasts()
    {
        forecasts = null; // Dette vil vise "Loading..." mens nye data indlæses
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>($"WeatherForecast?count={forecastCount}");

        StateHasChanged();  // Anmoder Blazor om at opdatere skærmen
    }
    */


    // Denne kode vil 'fixe' 5mere/mindre knapperne, til at filtrere automatisk hvis ønsket

    
    private async Task RefreshForecasts()
    {
        forecasts = null; // Dette vil vise "Loading..." mens nye data indlæses
        await FetchFilteredData();
        StateHasChanged();  // Anmoder Blazor om at opdatere skærmen
    }
    



    // Opgave 5:
    private string GetColorBasedOnSummary(string summary)
    {
        if (summary == "Freezing" || summary == "Cold")
        {
            return "blue";
        }
        else if (summary == "Hot" || summary == "Warm")
        {
            return "darkred";
        }
        else
        {
            return "green";
        }
    }
}